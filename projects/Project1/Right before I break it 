<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>domINation</title>
    <style>
    	* { padding: 0; margin: 0; }
    	canvas {
      background:url(pictures/space.jpg);

        display: block; margin: 0 auto;}
    </style>
</head>
<body>
<div>domINation
  <div>

<canvas id="myCanvas" width="800" height="700";></canvas>

<script>
//Canvas Stuff
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
//BallStart Position
var x = canvas.width/10;
var y = canvas.height-30;
var x2 = canvas.width/10
var y2 = 30
//slope for ball 1
var dx = 2;
var dy = -2;
//slope for ball 2
var dx2 = -2
var dy2 = 2
//ballRadius
var ballRadius = 15;
//Player1
var paddleHeight = 15;
var paddleWidth = 100;
var paddleX = (canvas.width-paddleWidth)/2;
//Player2
var paddleHeight2 = 15;
var paddleWidth2 = 100;
var paddleX2 = (canvas.width - paddleWidth)/2;
//Variables for Player 1 Key Press
var rightPressed = false;
var leftPressed = false;
//Variables for Player 2 Key Press
var rightPressed2 = false;
var leftPressed2 = false;
//BrickStuff
var brickRowCount = 5;
var brickColumnCount = 8;
var brickWidth = 95;
var brickHeight = 20;
var brickPadding = 1;
var brickOffsetTop = 300;
var brickOffsetLeft = 15;
var bricks = [""];

//Brick Format

for(c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0 };
    }
}
//Brick Maker
function drawBricks() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
            var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
            bricks[c][r].x = brickX;
            bricks[c][r].y = brickY;
            ctx.beginPath();
            ctx.rect(brickX, brickY, brickWidth, brickHeight);
            ctx.fillStyle = "yellow";
            ctx.fill();
            ctx.closePath();
        }
    }
}

//Draws the Paddle 1 (player 1)

function drawPaddle() {
    ctx.beginPath();
    ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
    ctx.fillStyle = "green";
    ctx.fill();
    ctx.closePath();
}
 //Draws paddle 2
function drawPaddle2() {
    ctx.beginPath();
    ctx.rect(paddleX2, 0, paddleWidth2, paddleHeight2);
    ctx.fillStyle = "pink";
    ctx.fill();
    ctx.closePath();
}
//Draws the Ball 1
function drawPong() {
    ctx.beginPath();
    ctx.arc(x, y, ballRadius, 0, Math.PI*2);
    ctx.fillStyle = "red";
    ctx.fill();
    ctx.closePath();
}

function drawPong2() {
    ctx.beginPath();
    ctx.arc(x2, y2, ballRadius, 0, Math.PI*2);
    ctx.fillStyle = "white";
    ctx.fill();
    ctx.closePath();

}
//draws the everything
function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPong();
    drawPong2();
    drawPaddle();
    drawPaddle2();
    drawBricks();
    collisionDetection();

    x += dx;
    y += dy;
    x2 += dx2;
    y2 += dy2;

//controls Key Movement for Player 1
if(rightPressed && paddleX < canvas.width-paddleWidth) {
    paddleX += 7;
}
else if(leftPressed && paddleX > 0) {
    paddleX -= 7;
}
//controls Key Movement for Player 2
if(rightPressed2 && paddleX2 < canvas.width-paddleWidth2) {
    paddleX2 += 7;
}
else if(leftPressed2 && paddleX2 > 0) {
    paddleX2 -= 7;
}
//Boundry code written below
//Top Boundry

    if(y + dy < ballRadius) {
//reverse slope (change direction)
      dy = -dy;
          console.error("Player 1 Wins!");
        }
  //Top Boundry

if(y2 + dy2 < ballRadius) {
//reverse slope (change direction)
      dy2 = -dy2;
          console.error("Player 1 Wins!");
}
//Paddle Collison Dectection
//Ball 1 Hits Paddle 1
    else if(y + dy > canvas.height-ballRadius) {
          if(x > paddleX && x < paddleX + paddleWidth) {
          if(y= y-paddleHeight){
              dy = -dy  ;
              console.warn("Player1 Paddle Hit by Ball 1")
			 }
     }
    }

  //  Ball 2 Hits Paddle 2
     else if(y2 + dy2 > canvas.height - ballRadius) {
          if(x2 > paddleX2 && x2 < paddleX2 + paddleWidth2) {
            if(y2= y2 - paddleHeight2){
              dy2 = -dy2;
              console.warn("Player 2 Paddle Hit by Ball 2")
     }
    }
}
    //Ball 2 Hits Paddle 2


    //Bottom Boundry...Not sure why the game breaks when I delete this (below) cause this is defined in the above code ^^
   if(y + dy > canvas.height-ballRadius) {
        dy = -dy;
          console.error("Player 2 Wins!")
}
//Bottom Boundry...Not sure why the game breaks when I delete this (below) cause this is defined in the above code ^^
if(y2 + dy2 > canvas.height-ballRadius) {
    dy2 = -dy2;
      console.error("Player 2 Wins!")
}
//Left and Right Boundry
if(x + dx > canvas.width-ballRadius){
 dx = -dx;
 console.log ("Right Wall Hit");
    }
    if( x + dx < ballRadius){
      dx=-dx;
      console.log("Left Wall Hit")
    }
//Left and Right Boundry
if(x2 + dx2 > canvas.width-ballRadius){
 dx2 = -dx2;
 console.log ("Right Wall Hit");
    }
    if( x2 + dx2 < ballRadius){
      dx2=-dx2;
      console.log("Left Wall Hit")
    }
}
//Key Event Listener
//Player 1
document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);
//Player 2
document.addEventListener("keydown", keyDownHandler2, false);
document.addEventListener("keyup", keyUpHandler2, false);
function keyDownHandler(e) {
    if(e.keyCode == 68) {
        rightPressed = true;
    }
    else if(e.keyCode == 65) {
        leftPressed = true;
    }
}

function keyUpHandler(e) {
    if(e.keyCode == 68) {
        rightPressed = false;
    }
    else if(e.keyCode == 65) {
        leftPressed = false;
    }
}
function keyDownHandler2(e) {
    if(e.keyCode == 39) {
        rightPressed2 = true;
    }
    else if(e.keyCode == 37) {
        leftPressed2 = true;
    }
}

function keyUpHandler2(e) {
    if(e.keyCode == 39) {
        rightPressed2 = false;
    }
    else if(e.keyCode == 37) {
        leftPressed2 = false;
    }
}
//Brick Collison Detection
function collisionDetection() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                dy = -dy;

                console.log("Brick Hit by Ball 1")

            }
            if(x2 > b.x && x2 < b.x+brickWidth && y2 > b.y && y2 < b.y+brickHeight) {
                dy2 = -dy2;
                console.log("Brick Hit by Ball 2")
              }
          }}}
//Game Speed
setInterval(draw, 5);




//red rectangle below

 // ctx.beginPath();
 // ctx.rect(350, 450, 50, 30);
 // ctx.fillStyle = "#FF0000";
 // ctx.fill();
 // ctx.closePath();







//hollow rectangle below

// ctx.beginPath();
// ctx.rect(350, 40, 100, 40);
// ctx.strokeStyle = "rgba(0, 0, 255, 0.5)";
// ctx.stroke();
// ctx.closePath();

//green circle below

// ctx.beginPath();
// ctx.arc(350, 40, 25, 0, Math.PI*2, false);
// ctx.fillStyle = "green";
// ctx.fill();
// ctx.closePath();
</script>

</body>
</html>

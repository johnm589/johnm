<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>domINation</title>
    <style>
    @font-face { font-family: spaceFont;
       src: url(media/spaceFont.ttf); }
    #title{
      font-size: 30px;
      float:left;
      margin-right: 860px;

    }
    	* {padding: 0; margin: 0; }
    	canvas {
      background:url(media/space.jpg);

        display: block; margin: 0 auto;
      }
      #multi{
        background-color: blue;
        color: white;
        width: 200px;
        height: 50px;
        display:block;

      }
      #solo{
        background-color: blue;
        color: white;
        width: 200px;
        height: 50px;
        display: block;

      }
      #button{
        margin-top: 300px;
        display:inline-block;
        float:left;
        position:absolute;
        left:5px;
        top:100px;

      }
      #container{
        background-color: grey;
      }
  #title{
    font-family: spaceFont;
    font:spaceFont;
    float:left;
    display: inline-block;
    color:white;
    position:absolute;
    left:40px;
      margin-top:290px;
  }
    </style>
</head>
<body>
  <div id= container>
<div id = "title">domiNation</div>
<div id= "button">

<button id="solo" onclick="init2()"> Play With Yourself</button>
<button id="multi" onclick="init()"> Play With a Friend</button>
</div>
<canvas id="myCanvas" width="800" height="700";></canvas>


<br>
<br>
</div>

<script>
//Runs domiNation
function init(){
  //Canvas Stuff
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
setInterval(draw, 5);
//BallStart Position
var x = canvas.width/10;
var y = 670;
var x2 = canvas.width/10
var y2 = 30
//slope for ball 1
var dx = 2;
var dy = -2;
//slope for ball 2
var dx2 = -2
var dy2 = 2
//ballRadius
var ballRadius = 15;
//Player1
var paddleHeight = 15;
var paddleWidth = 100;
var paddleX = (canvas.width-paddleWidth)/2;
//Player2
var paddleHeight2 = 15;
var paddleWidth2 = 100;
var paddleX2 = (canvas.width - paddleWidth)/2;
//Variables for Player 1 Key Press
var rightPressed = false;
var leftPressed = false;
//Variables for Player 2 Key Press
var rightPressed2 = false;
var leftPressed2 = false;
//BrickStuff
var brickRowCount = 5;
var brickColumnCount = 8;
var brickWidth = 95;
var brickHeight = 20;
var brickPadding = 1;
var brickOffsetTop = 300;
var brickOffsetLeft = 15;
//Sounds
var dominate = new Audio("media/dominating.mp3");
var boom = new Audio("media/boom.mp3");
var bounce = new Audio("media/bounce.mp3");



//Brick Format

var bricks = [];
for(c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(r=0; r<brickRowCount; r++) {
         bricks[c][r] = { x: 0, y: 0, status: 1 };

    }
}
//Brick Maker
function drawBricks() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
          if(bricks [c][r].status ==1){
            var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
            var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
            bricks[c][r].x = brickX;
            bricks[c][r].y = brickY;
            ctx.beginPath();
            ctx.rect(brickX, brickY, brickWidth, brickHeight);
            ctx.fillStyle = "yellow";
            ctx.fill();
            ctx.closePath();
        }
    }
}
}
//Draws the Paddle 1 (player 1)

function drawPaddle() {
    ctx.beginPath();
    ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
    ctx.fillStyle = "green";
    ctx.fill();
    ctx.closePath();
}
 //Draws paddle 2
function drawPaddle2() {
    ctx.beginPath();
    ctx.rect(paddleX2, 0, paddleWidth2, paddleHeight2);
    ctx.fillStyle = "pink";
    ctx.fill();
    ctx.closePath();
}
//Draws the Ball 1
function drawPong() {
    ctx.beginPath();
    ctx.arc(x, y, ballRadius, 0, Math.PI*2);
    ctx.fillStyle = "red";
    ctx.fill();
    ctx.closePath();
}

function drawPong2() {
    ctx.beginPath();
    ctx.arc(x2, y2, ballRadius, 0, Math.PI*2);
    ctx.fillStyle = "white";
    ctx.fill();
    ctx.closePath();

}
//draws the everything
function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPong();
    drawPong2();
    drawPaddle();
    drawPaddle2();
    drawBricks();
    collisionDetection();
//Ball Movement
    x += dx;
    y += dy;
    x2 += dx2;
    y2 += dy2;

//controls Key Movement for Player 1
if(rightPressed && paddleX < canvas.width-paddleWidth) {
    paddleX += 7;
}
else if(leftPressed && paddleX > 0) {
    paddleX -= 7;
}
//controls Key Movement for Player 2
if(rightPressed2 && paddleX2 < canvas.width-paddleWidth2) {
    paddleX2 += 7;
}
else if(leftPressed2 && paddleX2 > 0) {
    paddleX2 -= 7;
}
//Boundry code written below
//*Paddle 1 Ball 1 * Removed*
// if(y + dy < ballRadius) {
//     dy = -dy;
// }
 else if(y + dy > canvas.height-ballRadius) {
    if(x > paddleX && x < paddleX + paddleWidth) {
     if(y= y-paddleHeight){
            dy = -dy  ;
            console.error("Paddle 1 Hit By Ball 1")
            bounce.play();
          }
    }
    else if (y + dy > canvas.height - ballRadius) {
      dy=-dy;
        console.log("Player 2 Wins");
        dominate.play();
        alert("Player 1 Has Been DOMINATED! Player 2 WINS!");
        document.location.reload();
    }
  }
  //Paddle 1 Ball 2
   else if(y2 + dy2 > canvas.height-ballRadius) {
    if(x2 > paddleX && x2 < paddleX + paddleWidth) {
     if(y2= y2-paddleHeight){
            dy2 = -dy2  ;
            console.error("Paddle 1 Hit By Ball 2")
            bounce.play();
             }
    }
    else if (y2 + dy2 > canvas.height - ballRadius) {
      dy2=-dy2;
        console.log("Player 2 Wins");
        dominate.play();
        alert("Player 1 Has Been DOMINATED! Player 2 WINS!");
        document.location.reload();
    }
  }

//Paddle 2 Ball 1

if(y + dy > canvas.height - ballRadius) {
    dy = -dy;
} else if(y + dy < ballRadius ) {
    if(x > paddleX2 && x < paddleX2 + paddleWidth2) {
     if(y= y + paddleHeight2){
            dy = -dy ;
            console.error("Paddle 2 Hit by Ball 1")
            bounce.play();
             }
    }
    else if(y + dy < ballRadius) {
      dy = -dy;
        console.log("Player 1 Wins");
        dominate.play();
        alert("Player 2 Has Been DOMINATED! Player 1 WINS!");
        document.location.reload();
    }
  }

  //Paddle 2 Ball 2

  if(y2 + dy2 > canvas.height - ballRadius) {
      dy2 = -dy2;
  } else if(y2 + dy2 < ballRadius ) {
      if(x2 > paddleX2 && x2 < paddleX2 + paddleWidth2) {
       if(y2= y2 + paddleHeight2){
              dy2 = -dy2 ;
              console.error("Paddle 2 Hit by Ball 2")
              bounce.play();
               }
      }
      else if (y2 + dy2 < ballRadius) {
        dy2 = -dy2;
          console.log("Player 1 Wins");
          dominate.play();
          alert("Player 2 Has Been DOMINATED! Player 1 WINS!");
          document.location.reload();

      }
    }


//Left and Right Boundry Ball 1
if(x + dx > canvas.width-ballRadius){
 dx = -dx;
 console.log ("Right Wall Hit");
    }
    if( x + dx < ballRadius){
      dx = -dx;
      console.log("Left Wall Hit")
    }
//Left and Right Boundry Ball 2
if(x2 + dx2 > canvas.width-ballRadius){
 dx2 = -dx2;
 console.log ("Right Wall Hit");
    }
    if( x2 + dx2 < ballRadius){
      dx2 = -dx2;
      console.log("Left Wall Hit")
    }
}
//Key Event Listener
//Player 1
document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);
//Player 2
document.addEventListener("keydown", keyDownHandler2, false);
document.addEventListener("keyup", keyUpHandler2, false);
function keyDownHandler(e) {
    if(e.keyCode == 68) {
        rightPressed = true;
    }
    else if(e.keyCode == 65) {
        leftPressed = true;
    }
}

function keyUpHandler(e) {
    if(e.keyCode == 68) {
        rightPressed = false;
    }
    else if(e.keyCode == 65) {
        leftPressed = false;
    }
}
function keyDownHandler2(e) {
    if(e.keyCode == 39) {
        rightPressed2 = true;
    }
    else if(e.keyCode == 37) {
        leftPressed2 = true;
    }
}

function keyUpHandler2(e) {
    if(e.keyCode == 39) {
        rightPressed2 = false;
    }
    else if(e.keyCode == 37) {
        leftPressed2 = false;
    }
}
//Brick Collison Detection
function collisionDetection() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
                if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                    dy = -dy;
                    b.status = 0;
                    boom.play();
                console.log("Brick Hit by Ball 1");
            }
}
if(b.status == 1){
            if(x2 > b.x && x2 < b.x+brickWidth && y2 > b.y && y2 < b.y+brickHeight) {
                dy2 = -dy2;
                console.log("Brick Hit by Ball 2")
                b.status = 0;
                boom.play();
          }}}}}

//Pause Game *doesnt Work
function keyDown(e) {
  if (e.keyCode == 80) pauseGame();
}
function pauseGame() {
  if (!gamePaused) {
    game = clearInterval(game);
    gamePaused = true;
  } else if (gamePaused) {
    game = setInterval(draw, 1000000000);
    gamePaused = false;
  }
}
}
//Run domiBation
function init2(){
//Lel
  document.getElementById("title").innerHTML = "domiBation";

  //Canvas Stuff
  var canvas = document.getElementById("myCanvas");
  var ctx = canvas.getContext("2d");
  //BallStart Position
  var x = canvas.width/10;
  var y = canvas.height-30;
  //slope
  var dx = 2;
  var dy = -2;
  //ballRadius
  var ballRadius = 15;
  //Player1
  var paddleHeight = 15;
  var paddleWidth = 100;
  var paddleX = (canvas.width-paddleWidth)/2;
  //Variables for Player 1 Key Press
  var rightPressed = false;
  var leftPressed = false;
  //BrickStuff
  var brickRowCount = 20;
  var brickColumnCount = 8;
  var brickWidth = 95;
  var brickHeight = 20;
  var brickPadding = 1;
  var brickOffsetTop = 20;
  var brickOffsetLeft = 15;
  var bricks = [];
  //Sounds
  var dominate = new Audio("media/dominating.mp3");
  var boom = new Audio("media/boom.mp3");
  var bounce = new Audio("media/bounce.mp3");

  //Brick Format

  for(c=0; c<brickColumnCount; c++) {
      bricks[c] = [];
      for(r=0; r<brickRowCount; r++) {
          bricks[c][r] = { x: 0, y: 0, status: 1 };
      }
  }
  //Brick Maker
  function drawBricks() {
      for(c=0; c<brickColumnCount; c++) {
          for(r=0; r<brickRowCount; r++) {
            if(bricks [c][r].status == 1){
              var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
              var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
              bricks[c][r].x = brickX;
              bricks[c][r].y = brickY;
              ctx.beginPath();
              ctx.rect(brickX, brickY, brickWidth, brickHeight);
              ctx.fillStyle = "yellow";
              ctx.fill();
              ctx.closePath();
          }
      }
  }
  }
  //Draws the Paddle

  function drawPaddle() {
      ctx.beginPath();
      ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
      ctx.fillStyle = "green";
      ctx.fill();
      ctx.closePath();
  }
  //Draws the Ball
  function drawPong() {
      ctx.beginPath();
      ctx.arc(x, y, ballRadius, 0, Math.PI*2);
      ctx.fillStyle = "red";
      ctx.fill();
      ctx.closePath();
      ctx.arc(x, y, ballRadius, 0, Math.PI*2);
  }

  //draws the everything + calls other functions
  function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawPong();
      drawPaddle();
      drawBricks();
      collisionDetection();
      x += dx;
      y += dy;

  //controls Key Movement
  if(rightPressed && paddleX < canvas.width-paddleWidth) {
      paddleX += 7;
  }
  else if(leftPressed && paddleX > 0) {
      paddleX -= 7;
  }

  //Boundry code written below
  //Top Boundry

      if(y + dy < ballRadius) {
  //reverse slope (change direction)
        dy = -dy;
            console.log("Player 1 Wins!");
  }
  //Bottom Paddle Collison Dectection
      else if(y + dy > canvas.height-ballRadius) {
            if(x > paddleX && x < paddleX + paddleWidth) {
            if(y= y-paddleHeight){
                dy = -dy;
                console.log("Player1 Paddle Hit")
                bounce.play();
  			 }
       }
      }
      //Bottom Boundry
     if(y + dy > canvas.height-ballRadius) {
          dy = -dy;
            dominate.play();
            console.log("Player 2 Wins!")
            alert("Rekt");

            document.location.reload();

  }
  //Left and Right Boundry
  if(x + dx > canvas.width-ballRadius){
   dx = -dx;
   console.log ("Right Wall Hit");
      }
      if( x + dx < ballRadius){
        dx=-dx;
        console.log("Left Wall Hit")
      }
  }
  //Key Event Listener
  document.addEventListener("keydown", keyDownHandler, false);
  document.addEventListener("keyup", keyUpHandler, false);

  function keyDownHandler(e) {
      if(e.keyCode == 68) {
          rightPressed = true;
      }
      else if(e.keyCode == 65) {
          leftPressed = true;
      }
  }

  function keyUpHandler(e) {
      if(e.keyCode == 68) {
          rightPressed = false;
      }
      else if(e.keyCode == 65) {
          leftPressed = false;
      }
  }
  //Brick Collison Detection
  function collisionDetection() {
      for(c=0; c<brickColumnCount; c++) {
          for(r=0; r<brickRowCount; r++) {
              var b = bricks[c][r];
              if(b.status == 1) {
                  if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                      dy = -dy;
                      b.status = 0;
                      boom.play();
                  console.log("Brick Hit by Ball 1");
              }
  }

              }}}
  //Game Speed. Lower number = Moar speed
  setInterval(draw, 5);






}
//Game Speed





//red rectangle below

 // ctx.beginPath();
 // ctx.rect(350, 450, 50, 30);
 // ctx.fillStyle = "#FF0000";
 // ctx.fill();
 // ctx.closePath();







//hollow rectangle below

// ctx.beginPath();
// ctx.rect(350, 40, 100, 40);
// ctx.strokeStyle = "rgba(0, 0, 255, 0.5)";
// ctx.stroke();
// ctx.closePath();

//green circle below

// ctx.beginPath();
// ctx.arc(350, 40, 25, 0, Math.PI*2, false);
// ctx.fillStyle = "green";
// ctx.fill();
// ctx.closePath();
</script>

</body>
</html>
